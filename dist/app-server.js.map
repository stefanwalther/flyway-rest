{"version":3,"sources":["app-server.js"],"names":["appServer","init","expressApp","use","exposedHeaders","corsHeaders","json","limit","bodyLimit","done","server","port","process","env","PORT","listen","err","console","log","close"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,S;AACnB,uBAAc;AAAA;;AACZ,SAAKC,IAAL;AACD;;;;2BAEM;AACL,WAAKC,UAAL,GAAkB,wBAAlB;AACA;AACA,WAAKA,UAAL,CAAgBC,GAAhB,CAAqB,oBAAM;AACzBC,wBAAgB,iBAAcC;AADL,OAAN,CAArB;;AAIA,WAAKH,UAAL,CAAgBC,GAAhB,CAAqB,qBAAWG,IAAX,CAAiB;AACpCC,eAAO,iBAAcC;AADe,OAAjB,CAArB;;AAIA,WAAKN,UAAL,CAAgBC,GAAhB,CAAqB,2CAArB;AAED;;;0BAEMM,I,EAAO;AAAA;;AACZ,UAAK,CAAC,KAAKC,MAAX,EAAoB;AAAA;AAClB,cAAIC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,iBAAcH,IAA7C;AACA,gBAAKD,MAAL,GAAc,MAAKR,UAAL,CAAgBa,MAAhB,CAAwBJ,IAAxB,EAA8B,UAAEK,GAAF,EAAW;AACrD,gBAAK,CAACA,GAAN,EAAY;AACVC,sBAAQC,GAAR,sBAAgCP,IAAhC;AACD,aAFD,MAEO;AACLM,sBAAQC,GAAR,yBAAqCF,GAArC;AACD;AACD,mBAAOP,MAAP;AACD,WAPa,CAAd;AAFkB;AAUnB,OAVD,MAUO;AACLA;AACD;AAEF;;;2BAEO;AACN,UAAK,KAAKC,MAAV,EAAmB;AACjB,eAAO,KAAKA,MAAL,CAAYS,KAAZ,EAAP;AACD;AACF;;;;;;kBAzCkBnB,S","file":"app-server.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport middleware from './middleware';\nimport api from './api';\nimport defaultConfig from './config.json';\n\nexport default class appServer {\n  constructor() {\n    this.init();\n  }\n\n  init() {\n    this.expressApp = express();\n    // 3rd party middleware\n    this.expressApp.use( cors( {\n      exposedHeaders: defaultConfig.corsHeaders\n    } ) );\n\n    this.expressApp.use( bodyParser.json( {\n      limit: defaultConfig.bodyLimit\n    } ) );\n\n    this.expressApp.use( middleware( defaultConfig ) );\n\n  }\n\n  start( done ) {\n    if ( !this.server ) {\n      let port = process.env.PORT || defaultConfig.port;\n      this.server = this.expressApp.listen( port, ( err ) => {\n        if ( !err ) {\n          console.log( `Started on port ${port}.` );\n        } else {\n          console.log( `Cannot start server.`, err );\n        }\n        return done();\n      } );\n    } else {\n      done();\n    }\n\n  }\n\n  stop( ) {\n    if ( this.server ) {\n      return this.server.close(  );\n    }\n  }\n\n}\n\n"],"sourceRoot":"/Users/swr/git/stefanwalther/flyway-rest/src"}