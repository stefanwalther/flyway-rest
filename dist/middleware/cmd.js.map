{"version":3,"sources":["middleware/cmd.js"],"names":["exec","buildCommand","req","res","next","status","result","mode","body","cmd","flyway_args","command","ts_start","Date","toJSON","console","log","json","flyWayArgs","Object","keys","length","Error","indexOf","space","key"],"mappings":";;;;;;;;QAEgBA,I,GAAAA,I;QAiBAC,Y,GAAAA,Y;;AAnBhB;;;;;;AAEO,SAASD,IAAT,GAAgB;AACrB,SAAO,UAAUE,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA2B;;AAEhCD,QAAIE,MAAJ,CAAY,GAAZ;AACA,QAAIC,SAAS;AACXC,YAAML,IAAIM,IAAJ,CAASD,IADJ;AAEXE,WAAKR,aAAcC,IAAIM,IAAJ,CAASE,WAAvB,EAAoCR,IAAIM,IAAJ,CAASG,OAA7C,CAFM;AAGXC,gBAAU,IAAIC,IAAJ,GAAWC,MAAX,EAHC;AAIXT,cAAQ;AAJG,KAAb;AAMAU,YAAQC,GAAR,CAAa,QAAb,EAAuBV,MAAvB;AACAH,QAAIc,IAAJ,CAAUX,MAAV;AACAF;AACD,GAZD;AAcD;;AAEM,SAASH,YAAT,CAAuBiB,UAAvB,EAAsD;AAAA,MAAnBP,OAAmB,uEAAT,MAAS;;;AAE3D,MAAK,CAACO,UAAD,IAAgB,QAAOA,UAAP,yCAAOA,UAAP,OAAsB,QAAtB,IAAkCC,OAAOC,IAAP,CAAaF,UAAb,EAA0BG,MAA1B,GAAmC,CAA1F,EAA+F;AAC7F,UAAM,IAAIC,KAAJ,CAAW,yBAAX,CAAN;AACD;;AAED,MAAK,CAAE,OAAF,EAAW,MAAX,EAAmB,UAAnB,EAA+B,UAA/B,EAA2C,QAA3C,EAAqD,SAArD,EAAiEC,OAAjE,CAA0EZ,OAA1E,KAAuF,CAAC,CAA7F,EAAiG;AAC/F,UAAM,IAAIW,KAAJ,CAAW,yBAAX,EAAsCX,OAAtC,CAAN;AACD;;AAED,MAAIa,QAAQ,GAAZ;AACA,MAAIf,MAAM,QAAV;AAX2D;AAAA;AAAA;;AAAA;AAY3D,yBAAmBU,OAAOC,IAAP,CAAYF,UAAZ,CAAnB,8HAA6C;AAAA,UAAjCO,GAAiC;;AACzChB,aAAOe,QAAQ,IAAR,GAAeC,GAAf,GAAqBD,KAArB,GAA6BN,WAAWO,GAAX,CAApC;AACH;AAd0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe3DhB,SAAOe,QAAQb,OAAf;AACA,SAAOF,GAAP;AAED","file":"cmd.js","sourcesContent":["import execa from 'execa';\n\nexport function exec() {\n  return function( req, res, next ) {\n\n    res.status( 200 );\n    let result = {\n      mode: req.body.mode,\n      cmd: buildCommand( req.body.flyway_args, req.body.command ),\n      ts_start: new Date().toJSON(),\n      status: 'OK'\n    };\n    console.log( 'server', result );\n    res.json( result );\n    next();\n  };\n\n}\n\nexport function buildCommand( flyWayArgs, command = 'info' ) {\n\n  if ( !flyWayArgs || (typeof flyWayArgs === 'object' && Object.keys( flyWayArgs ).length < 1) ) {\n    throw new Error( 'No Flyway args defined.' );\n  }\n\n  if ( [ 'clean', 'info', 'validate', 'baseline', 'repair', 'migrate' ].indexOf( command ) <= -1 ) {\n    throw new Error( 'Invalid Flyway command.', command );\n  }\n\n  var space = ' ';\n  var cmd = 'flyway';\n  for ( const key of Object.keys(flyWayArgs) ) {\n      cmd += space + '--' + key + space + flyWayArgs[key];\n  }\n  cmd += space + command;\n  return cmd;\n\n}\n\n\n"],"sourceRoot":"/Users/swr/git/stefanwalther/flyway-rest/src"}